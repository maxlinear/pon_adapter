/******************************************************************************
 *
 *  Copyright (c) 2017 - 2019 Intel Corporation
 *
 * For licensing information, see the file 'LICENSE' in the root folder of
 * this software module.
 *
 ******************************************************************************/

/**
 * \file
 *
 * This is a PON Adapter OMCI Managed Entity header file for the
 * GEM Port Network Connection Termination Point (CTP).
 */

#ifndef _pon_adapter_me_gem_port_network_ctp_h
#define _pon_adapter_me_gem_port_network_ctp_h

#include "pon_adapter_base.h"

#ifdef __cplusplus
extern "C" {
#endif

/** \addtogroup PON_ADAPTER_ME
 *
 *  @{
 */

/** \defgroup PON_ADAPTER_ME_GEM_PORT_NETWORK_CTP GEM Port Network CTP
 *
 *  This Managed Entity represents the termination of a GEM port on an ONU. This
 *  Managed Entity aggregates connectivity functionality from the network view
 *  and alarms from the network element view as well as artefacts from trails.
 *
 *  Instances of the GEM port network CTP Managed Entity are created and deleted
 *  by the OLT. An instance of GEM port network CTP can be deleted only when no
 *  GEM interworking termination point or GEM port PM history data is associated
 *  with it. It is the responsibility of the OLT to make sure that the GEM port
 *  network CTP meets this condition. If the OLT wishes to configure the GEM
 *  port to use encryption, then the appropriate PLOAM message must be sent.
 *  This applies equally to new CTPs or to CTPs that are re-created after a MIB
 *  reset.
 *
 *  @{
 */

/** Supported values of the direction parameter in
 *    \ref pa_gem_port_net_ctp_update_data
 */
enum pa_gem_port_net_ctp_dir {
	/** UNI-to-ANI connection */
	PA_GEMPORTNETCTP_DIR_UPSTREAM = 1,
	/** ANI-to-UNI connection */
	PA_GEMPORTNETCTP_DIR_DOWNSTREAM = 2,
	/** Bidirectional connection */
	PA_GEMPORTNETCTP_DIR_BOTH = 3
};

/**
 * No encryption (default). The downstream key index is
 * ignored, and upstream traffic is transmitted with key index 0.
 */
#define PA_GEMPORTNETCTP_ENC_NO 0

/**
 * Unicast payload encryption in both directions. Keys are
 * generated by the ONU and transmitted to the OLT via the PLOAM
 * channel.
 */
#define PA_GEMPORTNETCTP_ENC_UC 1

/**
 * Broadcast (multicast) encryption. Keys are generated by the
 * OLT and distributed via OMCI.
 */
#define PA_GEMPORTNETCTP_ENC_BC 2

/**
 * Unicast encryption, downstream only. Keys are generated
 * by the ONU and transmitted to the OLT via the PLOAM channel.
 */
#define PA_GEMPORTNETCTP_ENC_UCDS 3

/** GEM Port Network CTP update structure */
struct pa_gem_port_net_ctp_update_data {
	/** GEM Port ID value */
	uint16_t gem_port_id;
	/** T-CONT pointer */
	uint16_t tcont_ptr;
	/** Direction */
	uint8_t direction;
	/** Upstream priority queue (Upstream Traffic management pointer) */
	uint16_t us_priority_queue_ptr;
	/** Value of "Drop precedence color marking" attribute of the Priority
	 *  Queue-G pointed by "Upstream traffic management pointer"
	 */
	uint8_t us_priority_queue_drop_precedence_color_marking;
	/** Value of "Egress color marking attribute" of the Traffic
	 *  Descriptor pointed by "Upstream traffic descriptor profile".
	 *  Set to 255 if "Upstream traffic descriptor profile" is NULL
	 */
	uint8_t us_traffic_descriptor_egress_color_marking;
	/** Traffic descriptor profile pointer for upstream */
	uint16_t us_traffic_descriptor_profile_ptr;
	/** Priority queue pointer for downstream */
	uint16_t ds_priority_queue_ptr;
	/** Traffic descriptor profile pointer for downstream */
	uint16_t ds_traffic_descriptor_profile_ptr;
	/** Enable/Disable Multicast Control */
	uint8_t mcc_enable;
	/** Encryption key ring */
	uint8_t encryption_key_ring;
};

/** GEM Port Network CTP destroy structure */
struct pa_gem_port_net_ctp_destroy_data {
	/** GEM Port ID value */
	uint16_t gem_port_id;
	/** Upstream Traffic Descriptor Managed Entity Identifier */
	uint16_t us_traffic_descriptor_profile_ptr;
	/** Downstream Traffic Descriptor Managed Entity Identifier */
	uint16_t ds_traffic_descriptor_profile_ptr;
};

/** GEM Port Network CTP operations structure */
struct pa_gem_port_net_ctp_ops {
	/** Update GEM Port Network CTP Managed Entity resources
	 *
	 *  \remark Enable Managed Entity identifier mapping to driver index and
	 *  initialize corresponding driver structures when it is called first
	 *  time for the given Managed Entity ID
	 *
	 *  \param[in] ll_handle             Lower layer context pointer
	 *  \param[in] me_id                 Managed Entity identifier
	 *  \param[in] update_data           Gem port network CTP update data
	 */
	enum pon_adapter_errno (*update)(void *ll_handle, const uint16_t me_id,
		const struct pa_gem_port_net_ctp_update_data *update_data);

	/** Disable Managed Entity identifier mapping to driver index and clear
	 *  corresponding driver structures
	 *
	 *  \param[in] ll_handle    Lower layer context pointer
	 *  \param[in] me_id        Managed Entity identifier
	 *  \param[in] destroy_data Gem port network CTP destroy data
	 */
	enum pon_adapter_errno (*destroy)(void *ll_handle, const uint16_t me_id,
		const struct pa_gem_port_net_ctp_destroy_data *destroy_data);
};

/** @} */

/** @} */

#ifdef __cplusplus
}
#endif

#endif
